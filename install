#!/bin/sh
#
# Usage: install [-d DIR] [-q] [[-a ALGO]...]|[-f FILE]|[-u URL]
#
# Download statically-linked, hermetic, relocatable Zsh 5.8 from
# https://github.com/romkatv/zsh-bin/releases and install it to DIR.
#
# Options:
#
#   -d DIR  Install to this directory. Defaults to ~/.zsh-bin.
#
#   -q      Produce no output on success.
#
#   -a ALGO Abort installation if integrity of the downloaded package cannot
#           be verified with the specified algorithm. ALGO can be "sha256" or
#           "md5". Cannot be combined with '-f' and '-u'. If '-a' is specified
#           more than once, at least one algorithm must succeed or
#           installation is be aborted.
#
#   -f FILE Install from a local file. FILE must point to *.tar.gz produced by
#           the build script.
#
#   -u URL  Download the archive from the specified location and install as
#           usual. Must point to *.tar.gz produced by the build script.

{

set -ue

if [ -n "${ZSH_VERSION:-}" ]; then
  emulate sh -o err_exit -o no_unset
fi

readonly url_base=https://github.com/romkatv/zsh-bin/releases/download/v3.0.1

readonly archives='
file:zsh-5.8-cygwin_nt-10.0-i686.tar.gz;   md5:3f8bdf8c53d90b2113e7c588bcd24737; sha256:a7236a12b2351cf0461b6e7d46ea50a4dc51be89ea895daea9fd5c80f5178127;
file:zsh-5.8-cygwin_nt-10.0-x86_64.tar.gz; md5:4f23789b8545667e81fd325e66417469; sha256:f586cb71155b500b2d956b8699482b2d98e7b8df0828fe930384dd4ec7e25159;
file:zsh-5.8-darwin-x86_64.tar.gz;         md5:7512ce659a89c8ad4364cfcd23f58171; sha256:f746da5983c28765b3bd590d505968bb7acb2682412bdca0cce709fd87958336;
file:zsh-5.8-freebsd-amd64.tar.gz;         md5:caa8c128228191a0a87f5009bcdeb45c; sha256:ed95b7b97fa84dba3eef94df6876b545c6301d5b14c9bf3c78b011a87d0bb29e;
file:zsh-5.8-linux-aarch64.tar.gz;         md5:0338240a28505b6b03fcb6c2a11023fd; sha256:3dd9e777b7d6df2c65b7a5864c74871e65c123e673531801e6b4152bae484f88;
file:zsh-5.8-linux-armv7l.tar.gz;          md5:5799285a600acc192375a1a76483c7a3; sha256:4fd7f5178478d6e70766113f141fa0288cd9eee84c952c6cdeda00e4545a27da;
file:zsh-5.8-linux-i386.tar.gz;            md5:eaff316a70279d11ea41465c2a45de09; sha256:f35237b844e83d4517020e6119456597fda323ec103da08b9ea73ad619ca7314;
file:zsh-5.8-linux-i586.tar.gz;            md5:9d9cd6c133a5b3ac9c01d058fcc03749; sha256:ad1011e4af5b4407abb3fb4819b276a94ddd5a48a75147bfd4172545c5c9236e;
file:zsh-5.8-linux-i686.tar.gz;            md5:c9572f927d1c4238a3b88b2c55bd403c; sha256:de4440a6ff88ee0004b67707274fb36d26bf67489cc94781cdd7791addca8440;
file:zsh-5.8-linux-x86_64.tar.gz;          md5:093a5caa31db9a383c7b5bfd3a3ed353; sha256:8bc7e531dd88b1cd2e2e879840d0e73866ff90ade84c556a420231eda380208a;
file:zsh-5.8-msys_nt-10.0-i686.tar.gz;     md5:16f6b3aefbcdada9edd4711402948302; sha256:e1a5b72dedfe5ad749b96b59ec6a52c32540a37d9183de11c84e747ce10911ab;
file:zsh-5.8-msys_nt-10.0-x86_64.tar.gz;   md5:635716bc7be6560a567a7836319ca629; sha256:d9df06aeada673489001c45b39186056730f2321f0087598d3d27b5e000dcc14;'

usage="$(cat <<\END
Usage: install [-d DIR] [-q] [[-a ALGO]...]|[-f FILE]|[-u URL]

Download statically-linked, hermetic, relocatable Zsh 5.8 from
https://github.com/romkatv/zsh-bin/releases and install it to DIR.

Options:

  -d DIR  Install to this directory. Defaults to ~/.zsh-bin.

  -q      Produce no output on success.

  -a ALGO Abort installation if integrity of the downloaded package cannot
          be verified with the specified algorithm. ALGO can be "sha256" or
          "md5". Cannot be combined with '-f' and '-u'. If '-a' is specified
          more than once, at least one algorithm must succeed or
          installation is be aborted.

  -f FILE Install from a local file. FILE must point to *.tar.gz produced by
          the build script.

  -u URL  Download the archive from the specified location and install as
          usual. Must point to *.tar.gz produced by the build script.
END
)"

absfile() {
  [ -e "$1" ]
  local dir base
  dir="$(dirname -- "$1")"
  base="$(basename -- "$1")"
  ( cd -- "$dir" && dir="$(pwd)" && printf '%s/%s\n' "${dir%/}" "${base}" )
}

dir=
quiet=
algos=
url=
file=

while getopts ':hqd:a:f:u:' opt "$@"; do
  case "$opt" in
    h)
      printf '%s\n' "$usage"
      exit
    ;;
    q)
      if [ -n "$quiet" ]; then
        >&2 echo "[error] duplicate option: -$opt"
        exit 1
      fi
      quiet=1
    ;;
    d)
      if [ -n "$dir" ]; then
        >&2 echo "[error] duplicate option: -$opt"
        exit 1
      fi
      if [ -z "$OPTARG" ]; then
        >&2 echo "[error] incorrect value of -$opt: $OPTARG"
        exit 1
      fi
      dir="$OPTARG"
    ;;
    a)
      case "$OPTARG" in
        sha256|md5)
          if [ -n "$algos" -a -z "${algos##*<$OPTARG>*}" ]; then
            >&2 echo "[error] duplicate option: -$opt $OPTARG"
            exit 1
          fi
          algos="$algos<$OPTARG>"
        ;;
        *)
          >&2 echo "[error] incorrect value of -$opt: $OPTARG"
          exit 1
        ;;
      esac
    ;;
    f)
      if [ -n "$file" ]; then
        >&2 echo "[error] duplicate option: -$opt"
        exit 1
      fi
      if [ -z "$OPTARG" ]; then
        >&2 echo "[error] incorrect value of -$opt: $OPTARG"
        exit 1
      fi
      if ! file="$(absfile "$OPTARG")"; then
        >&2 echo "[error] file not found: $OPTARG"
        exit 1
      fi
    ;;
    u)
      if [ -n "$url" ]; then
        >&2 echo "[error] duplicate option: -$opt"
        exit 1
      fi
      if [ -z "$OPTARG" ]; then
        >&2 echo "[error] incorrect value of -$opt: $OPTARG"
        exit 1
      fi
      url="$OPTARG"
    ;;
    \?) >&2 echo "[error] invalid option: -$OPTARG"           ; exit 1;;
    :)  >&2 echo "[error] missing required argument: -$OPTARG"; exit 1;;
    *)  >&2 echo "[internal error] unhandled option: -$opt"   ; exit 1;;
  esac
done

if [ "$OPTIND" -le $# ]; then
  >&2 echo "[error] unexpected positional argument"
  return 1
fi

if [ -n "$algos" ]; then
  if [ -n "$file" ]; then
    >&2 echo "[error] incompatible options: -f and -a"
    exit 1
  fi
  if [ -n "$url" ]; then
    >&2 echo "[error] incompatible options: -u and -a"
    exit 1
  fi
fi

if [ -n "$dir" ]; then
  if [ -n "${dir##/*}" ]; then
    >&2 echo "[error] path not absolute: $dir"
    exit 1
  fi
else
  home="${HOME:-x}"
  if [ "$home" = x -o -n "${home##/*}" ]; then
    >&2 echo "[error] invalid HOME: $home"
    exit 1
  fi
  dir="$home"/.zsh-bin
fi

if [ -e "$dir" ]; then
  if [ ! -d "$dir" ]; then
    >&2 echo "[error] not a directory: $dir"
    exit 1
  fi
  files="$(ls -A -- "$dir")"
  if [ -n "$files" ]; then
    >&2 echo "[error] directory exists and not empty: $dir"
    exit 1
  fi
fi

tmpdir="$dir".tmp.$$
cleanup() {
  cd /
  rm -rf -- "$tmpdir"
}
trap cleanup INT QUIT TERM EXIT ILL PIPE

rm -rf -- "$tmpdir"
mkdir -- "$tmpdir"
cd -- "$tmpdir"

if [ -z "$file" -a -z "$url" ]; then
  kernel="$(uname -s | tr '[A-Z]' '[a-z]')"
  arch="$(uname -m | tr '[A-Z]' '[a-z]')"

  case "$kernel" in
    msys_nt-6.*)     kernel=msys_nt-10.0;;
    msys_nt-10.*)    kernel=msys_nt-10.0;;
    mingw32_nt-6.*)  kernel=msys_nt-10.0;;
    mingw32_nt-10.*) kernel=msys_nt-10.0;;
    mingw64_nt-6.*)  kernel=msys_nt-10.0;;
    mingw64_nt-10.*) kernel=msys_nt-10.0;;
    cygwin_nt-6.*)   kernel=cygwin_nt-10.0;;
    cygwin_nt-10.*)  kernel=cygwin_nt-10.0;;
  esac

  url="$url_base/zsh-5.8-${kernel}-${arch}.tar.gz"

  if [ -n "${archives##*file:${url##*/};*}" ]; then
    >&2 echo "[error] there is no prebuilt binary for your architecture"
    >&2 echo "See https://github.com/romkatv/zsh-bin#compiling if you'd"
    >&2 echo "like to build it yourself."
    exit 1
  fi

  check_sig=1
else
  check_sig=0
fi

if [ -n "$url" ]; then
  if [ -z "$quiet" ]; then
    echo "Downloading $url"
  fi

  if command -v curl >/dev/null 2>&1; then
    curl -fsSLO -- "$url"
  elif command -v wget >/dev/null 2>&1; then
    wget ${quiet:+--quiet} -- "$url"
  else
    >&2 echo "[error] please install curl or wget and retry"
    exit 1
  fi

  file="$tmpdir/${url##*/}"
fi

if [ "$check_sig" = 1 ]; then
  if [ -z "$quiet" ]; then
    echo "Verifying archive integrity"
  fi

  for algo in sha256 md5; do
    hash=none
    case "$algo" in
      sha256)
        if command -v shasum >/dev/null 2>/dev/null; then
          hash="$(shasum -b -a 256 -- "$file")"
          hash="${hash%% *}"
        elif command -v sha256sum >/dev/null 2>/dev/null; then
          hash="$(sha256sum -b -- "$file")"
          hash="${hash%% *}"
        elif command -v sha256 >/dev/null 2>/dev/null; then
          # Ignore sha256 output if it's from hashalot. It's incompatible.
          hash="$(sha256 -- "$file" </dev/null)"
          if [ ${#hash} -lt 64 ]; then
            hash=none
          else
            hash="${hash##* }"
          fi
        fi
      ;;
      md5)
        if command -v md5sum >/dev/null 2>/dev/null; then
          hash="$(md5sum -b -- "$file")"
          hash="${hash%% *}"
        elif command -v md5 >/dev/null 2>/dev/null; then
          hash="$(md5 -- "$file")"
          hash="${hash##* }"
        fi
      ;;
      *)
        >&2 echo "[internal error] unhandled algorithm: $algo"
        exit 1
      ;;
    esac
    if [ "$hash" != none ]; then
      if [ -n "${archives##* $algo:$hash;*}" ]; then
        >&2 echo "[error] $algo signature mismatch"
        >&2 echo ""
        >&2 echo "Expected:"
        >&2 echo ""
        >&2 echo "  $(printf "%s" "$archives" | grep -F "${file##*/}" | sed 's/  */ /g')"
        >&2 echo ""
        >&2 echo "Found:"
        >&2 echo ""
        >&2 echo "  $algo:$hash"
        exit 1
      fi
      if [ -z "$quiet" ]; then
        echo "$algo signature matches"
      fi
      algos="${algos##*<$algo>*}"
    else
      if [ -z "$quiet" ]; then
        echo "No local tools available to verify $algo signature"
      fi
    fi
  done
fi

if [ -n "$algos" ]; then
  >&2 echo "[error] unable to verify archive integrity: no suitable tools available"
  exit 1
fi

if [ -z "$quiet" ]; then
  echo "Extracting files"
fi

tar -xzf "$file"
base="$(basename -- "${file%.tar.gz}")"
"$base"/share/zsh/5.8/scripts/relocate -d "$dir"

if [ -z "$quiet" ]; then
  echo "Moving files to $dir"
fi

mkdir -p -- "$dir"
rmdir -- "$dir"
mv -- "$tmpdir"/"$base" "$dir"

cleanup

if [ -z "$quiet" ]; then
  echo ""
  echo "Zsh 5.8 successfully installed to $dir"
  echo ""
  echo "To start zsh, type:"
  echo ""
  echo "  $dir/bin/zsh"
  echo ""
  echo "Consider adding $dir/bin to PATH for convenience."
fi

}
